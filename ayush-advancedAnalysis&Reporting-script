



-------------- ADVANCED DA - REPORT GENERATION ----------------
---------------------------------------------------------------

 


----------- Change over Time Trends -----------
-----------------------------------------------



-- Σ [Measure] By [Date Dimension]
-- Sales amount by order date
SELECT
  EXTRACT(YEAR FROM order_date) AS order_year,
  EXTRACT(MONTH FROM order_date) AS order_month,
  SUM(sales_amount * quantity) AS Total_sales,
  CAST(AVG(sales_amount * quantity) AS INT64) AS avg_sales,
FROM
  `ecomcasestudy1.fact_sales`
WHERE
  order_date IS NOT NULL
GROUP BY 
  order_year, order_month
ORDER BY
  order_year, order_month;




-- Σ [Cummulative Measure] By [Date Dimension]
-- Running Total sales by Year
WITH Total_sales_output AS 
(
  SELECT
    EXTRACT(YEAR FROM order_date) AS order_year,
    EXTRACT(MONTH FROM order_date) AS order_month,
    CAST(AVG(sales_amount * quantity) AS INT64) AS avg_sales,
    SUM(sales_amount * quantity) AS Total_sales,
  FROM
    `ecomcasestudy1.fact_sales`
  WHERE
    order_date IS NOT NULL
  GROUP BY 
    order_year, order_month
  ORDER BY
    order_year, order_month
)
SELECT 
  order_year,
  order_month,
  avg_sales,
  Total_sales,
  SUM(Total_sales) OVER 
  (
    PARTITION BY order_year ORDER BY order_year,order_month -- partitioned by year
    ) AS Running_total_sales,
FROM 
  Total_sales_output;






------------ Performance Analysis -------------
-----------------------------------------------




-- ( Current[Measure] - Target[Measure] ) By [Dimension/s]
-- CS - AS, CYS - PYS, CS - LS 
WITH Total_sales_output AS 
(
  SELECT
    EXTRACT(YEAR FROM t0.order_date) AS order_year,
    t1.subcategory,
    SUM(t0.sales_amount * t0.quantity) AS current_sales,
  FROM
    `ecomcasestudy1.fact_sales` AS t0
  INNER JOIN
    `ecomcasestudy1.dim_products` AS t1
  ON 
    t0.product_key = t1.product_key 
  WHERE
    t0.order_date IS NOT NULL
  GROUP BY 
    order_year,t1.subcategory -- by year and subcategory
)
SELECT
  order_year,
  subcategory,
  current_sales,
  --  YOY Analysis
  CAST(AVG(current_sales) OVER (PARTITION BY subcategory) AS INT64) AS avg_sales,
  CAST(current_sales - AVG(current_sales) OVER (PARTITION BY subcategory) AS INT64) AS diff_from_avg,
  CASE WHEN current_sales - AVG(current_sales) OVER (PARTITION BY subcategory) > 0 THEN "Above Avg" 
       WHEN current_sales - AVG(current_sales) OVER (PARTITION BY subcategory) < 0 THEN "Below Avg"
       ELSE "Avg"
  END AS avg_change,
  LAG(current_sales) OVER (PARTITION BY subcategory ORDER BY order_year) AS py_sales,
  current_sales - LAG(current_sales) OVER (PARTITION BY subcategory ORDER BY order_year) AS diff_pay,
  CASE WHEN current_sales - LAG(current_sales) OVER (PARTITION BY subcategory ORDER BY order_year) > 0 THEN "Increased" 
       WHEN current_sales - LAG(current_sales) OVER (PARTITION BY subcategory ORDER BY order_year) < 0 THEN "Decreased"
       ELSE "No change"
  END AS py_change,
FROM 
  Total_sales_output
ORDER BY
  subcategory, order_year;






--------------- Part to Whole -----------------
-----------------------------------------------




-- ( [Measure] / Total[Measure] ) * 100 By [Dimension]
WITH category_sales_output AS
(
  SELECT
    category,
    SUM(sales_amount * quantity) AS total_sales
  FROM
    `ecomcasestudy1.dim_products` AS t0
  INNER JOIN
    `ecomcasestudy1.fact_sales` AS t1
  ON
    t0.product_key = t1.product_key
  GROUP BY
    category
)
SELECT  
  category,
  total_sales,
  CONCAT(ROUND(
    (total_sales / SUM(total_sales) OVER())
    ,2) * 100, '%') AS pct_contri, -- performs calculation over all rows, instead of aggreating the output into one
FROM
  category_sales_output;






--------------- Data Segmentation -----------------
---------------------------------------------------





-- [Measure] By [Measure]
-- Segment products in cost ranges, and count how many products fall under each segment
SELECT
  CASE
    WHEN cost < 100 THEN "Below 100"
    WHEN cost >= 100 AND cost <= 1000 THEN "Btw 100-500"
    ELSE "Above 1000"
  END AS cost_range,
  COUNT(product_name) AS products_in_range 
FROM
  `ecomcasestudy1.dim_products`
WHERE
  product_name IS NOT NULL
GROUP BY 
  cost_range;





-- Group customers in three segments based on their spending behavior: 
-- VIP: at least 12 months of history and spending more than €5,000.
-- Regular: at least 12 months of history but spending €5,000 or less.
-- New: lifespan less than 12 months.
WITH customer_spending_output AS 
(
  SELECT  -- for preparing metrics required for segmenting customers
    t0.customer_key,
    SUM(sales_amount * quantity) AS Total_sales,
    MIN(order_date) AS first_order,
    MAX(order_date) AS last_order,
    DATE_DIFF(MAX(order_date), MIN(order_date), MONTH) AS Lifespan
  FROM
    `ecomcasestudy1.fact_sales` AS t0
  LEFT JOIN
    `ecomcasestudy1.dim_customers` AS t1
  ON 
    t0.customer_key = t1.customer_key
  GROUP BY
    t0.customer_key
)
SELECT -- for counting customer in each segment
  customer_segment,
  COUNT(customer_key) AS customer_count,
FROM 
  (
    SELECT -- for defining the segment for individual customers
      customer_key,
      Total_sales,
      Lifespan,
      CASE
        WHEN Lifespan > 1 AND  Total_sales > 5000 THEN "VIP"
        WHEN Lifespan > 1 AND  Total_sales < 5000 THEN "Regular"
        ELSE "New"
      END AS customer_segment,
    FROM
      customer_spending_output
)
GROUP BY
  customer_segment
ORDER BY 
  customer_count DESC;














--------------- Final Customer Report -----------------
-------------------------------------------------------


/*

Purpose:
  - This report combines key customer metrics and behaviors
Highlights:
  1. Gathers essential fields such as names, ages, and transaction details.
  2. Segments customers into categories (VIP, Regular, New) and age groups.
  3. Aggregates customer-level metrics:
    - total orders
    - total sales
    - total quantity purchased
    - total products
    - lifespan (Active buying status, in months) 
  4. Calculates valuable KPIs:
    - recency (months since last order)
    - average order value
    - average monthly spend

*/

CREATE OR REPLACE VIEW
  `abstract-key-415803`.`ecomcasestudy1`.`customer_report` 
  AS
    WITH base_query AS 
    --- -- - 
    --- 1. Base Query - Retrieving the core columns from fact and dimension table (In that order)
    --- -- - 
    (
      SELECT -- w/t basic transformations
        order_number,
        product_key,
        order_date,
        sales_amount,
        quantity,
        -- Divider for clarity
        t1.customer_key,
        customer_number,
        CONCAT(first_name ,' ', last_name) AS customer_name,
        customer_age, 
      FROM
        `ecomcasestudy1.fact_sales` AS t0
      LEFT JOIN
        `ecomcasestudy1.dim_customers` AS t1
      ON 
        t0.customer_key = t1.customer_key
      WHERE -- Filtering the data after selecting the required columns for report
        order_date IS NOT NULL
      AND
        customer_age IS NOT NULL  -- Should have been aware of null values in order_date before
    ), 
      customer_aggregation AS
      --- -- - 
      --- 2. Aggregation Query - Performing most of the aggregations at this step (Grouping by individual customers)
      --- -- - 
      (
      SELECT -- Try to perform all of your aggregations in one CTE
        customer_key,
        customer_number,
        customer_name,
        customer_age,
        COUNT(order_number) AS total_orders,
        SUM(sales_amount * quantity) AS total_sales,
        SUM(quantity) AS total_quantity_purch, 
        COUNT(DISTINCT product_key) AS total_products,
        MAX(order_date) AS last_order_date,
        DATE_DIFF(MAX(order_date), MIN(order_date), MONTH) AS lifespan
      FROM 
        base_query
      GROUP BY -- Ensures all columns are grouped, preventing "column not aggregated" warnings  
        customer_key,
        customer_number,
        customer_name,
        customer_age
      )
        SELECT
        --- -- - 
        --- 3. Segmentation & calculations - As the name suggests
        --- -- - 
            customer_key,
            customer_number,
            customer_name,
            -- Segmenting customer by age
            CASE 
              WHEN customer_age < 40 THEN "Below 40"
              WHEN customer_age BETWEEN 40 AND 49 THEN "40 - 49"
              WHEN customer_age BETWEEN 50 AND 59 THEN "50 - 59"
              WHEN customer_age BETWEEN 60 AND 69 THEN "60 - 69"
              ELSE "Above 70"
            END AS age_segment,
            -- Segmenting customer by lifetime value
            CASE
              WHEN lifespan > 1 AND  total_sales > 5000 THEN "VIP"
              WHEN lifespan > 1 AND  total_sales < 5000 THEN "Regular"
              ELSE "New"
            END AS customer_segment,
            total_orders,
            total_sales,
            total_quantity_purch, 
            total_products,
            DATE_DIFF(CURRENT_DATE(), last_order_date, MONTH) AS recency,
            -- Average order value(AOV) = Total sales / Nr. of orders
            CASE 
              WHEN total_orders = 0 THEN 0 
              ELSE CAST( total_sales / total_orders AS INT64)
            END AS AOV,
            -- Average monthly spent = Total_sales / lifespan
            CASE
              WHEN lifespan = 0 THEN Total_sales
              ELSE CAST( Total_sales / lifespan AS INT64)
            END AS avg_monthly_spent,
        FROM
          customer_aggregation;
















